/* stack.gds  */

/* INVARIANTS
  - SP points to the top (bottom?) entry in the stack
*/

// destroys rbx,rcx,rdx,rdi,r9,r12,r13,r14
PUSH :=
     MOV rcx,rax ; preserve ACC; destroys rax
     MOV rax,rbp ; destroys rbx,r9,r12
     ADD rax,-8  ; dec SP; destroys rdi
     MOV rdx,rax
     MOV [rdx],rcx ; move ACC into SP
     MOV rbp,rax ; destroys rdx,r9,r12,r13,r14
     MOV rax,rcx ; restore ACC

PUSH imm64 :=
     MOV rcx,rax   ; 3  preserve ACC
     MOV rax,rbp   ; 10
     ADD rax,-8    ; 3  dec SP
     MOV rdx,rax   ; 1
     MOV rdi,imm64 ; 2
     MOV [rdx],rdi ; 1 store on top of stack
     MOV rbp,rax   ; 7 update SP
     MOV rax,rcx   ; 1  restore ACC

// destroys rbx,rcx,rdx,rdi,r9,r12,r13,r14
POP :=
    MOV rax,rbp ; destroys rbx,r9,r12
    MOV rdx,rax ; rdx <- rbp
    MOV rax,[rdx] ; destroys [rdx]
    MOV rcx,rax ; preserve ACC; destroys rax
    MOV rax,rdx
    ADD rax,8   ; destroys rdi
    MOV rbp,rax ; destroys rdx,r9,r12,r13,r14
    MOV rax,rcx ; restore ACC

PEEK :=
     MOV rax,rbp ; destroys rbx,r9,r12
     MOV rax,[rax]

// fetches 64-bit value at [SP + imm64] to ACC
GET imm64 :=
    MOV rax,rbp
    ADD rax,imm64
    MOV rax,[rax]

// writes 64-bit value in ACC to [SP + imm64]
PUT imm64 :=
    MOV rcx,rax   ; preserve ACC
    MOV rax,rbp
    ADD rax,imm64
    MOV rdx,rax
    MOV [rdx],rcx
    MOV rax,rcx   ; restore ACC

// subtracts imm64 from SP
// preserves rax
ALLOC imm64 :=
    MOV rcx,rax
    MOV rax,rbp
    MOV rdx,imm64
    SUB rax,rdx
    MOV rbp,rax
    MOV rax,rcx

// alloc ACC bytes
ALLOC :=
  MOV rcx,rax
  MOV rdx,rax
  MOV rax,rbp
  SUB rax,rdx
  MOV rbp,rax
  MOV rax,rcx


// adds imm64 to SP
LEAVE imm64 :=
    MOV rcx,rax   ; preserve ACC
    MOV rax,rbp   ; 
    ADD rax,imm64 ;
    MOV rbp,rax
    MOV rax,rcx   ; restore ACC

// move SP into ACC
LEA imm64 :=
    MOV rax,rbp
    ADD rax,imm64

#
