:: ROPC INSTRUCTION SET REFERENCE ::
::     Nicholas Mosier 2019       ::

Instruction types:
 * Move
 * Stack manipulation
 * Memory access
 * Arithmetic
 * Comparison
 * Branching
 * Calls

Registers:
 * ACC   -- the accumulator. ACC is an implied operand in many instructions.
 * SP    -- the stack pointer. (No relation to x86_64's %rsp.) Never directly
            specified in an instruction, only implied.
 * PC    -- the program counter. (No relation to x86_64's %rip.) Never directly
            specified in an instruction, only implied.
 All registers are 64-bit.

Flags:
 There are two flags: ZF (zero flag) and CF (carry flag). They are set/reset by a
 CMP instruction. Most instructions unpredictably destroy these flags, so a CMP
 instruction should directly precede the instruction which depends on it (JEQ, e.g.).

Instruction descriptions:

########## MOVE ##########
MOV imm64 -- move imm64 into ACC. (ACC <- imm64)

### STACK MANIPULATION ###
PUSH        -- push ACC onto stack. (SP <- SP - 8, [SP] <- ACC). Preserves ACC.
PUSH imm64  -- push imm64 onto stack. (SP <- SP - 8, [SP] <- imm64). Preserves ACC.
POP  	    -- pop value off stack into ACC. (ACC <- [SP], SP <- SP + 8).
PEEK	    -- copy value from top of stack to ACC. (ACC <- [SP]). SP, [SP] unchanged.
GET imm64   -- load value at stack index imm64 to ACC. (ACC <- [SP + imm64]).
    	      SP, [SP + imm64] unchanged.
PUT imm64   -- store ACC into value at stack index imm64. ([SP + imm64] <- ACC).
    	      SP, [SP + imm64] unchanged.
LEA imm64   -- load effective address of stack index. (ACC <- SP + imm64).
ALLOC imm64 -- allocate imm64 bytes on the stack. Must be a multiple of 8. Preserves
      	       ACC. (SP <- SP - imm64). See related LEAVE instruction.
LEAVE imm64 -- deallocate imm64 bytes on the stack. Must be a multiple of 8.
      	       Preserves ACC. (SP <- SP + imm64).	       

######### MEMORY #########
LD imm64  -- load 64-bit value from [ACC] into [SP + imm64]. Preserves ACC.
STO imm64 -- load 64-bit value from [SP + imm64] into [ACC]. Preserves ACC.

####### ARITHMETIC #######
ADD           -- pop value off stack and add to ACC.
	         (ACC <- ACC + [SP], SP <- SP + 8)
ADDFROM imm64 -- add value at stack index imm64 to ACC. (ACC <- ACC + [SP + imm64])
	         Preserves [SP + imm64].
SUB           -- pop value off stack and subtract from ACC.
	         (ACC <- ACC - [SP], SP <- SP + 8)
INC           -- increase ACC. (ACC <- ACC+1). The zero flag (ZF) is set accordingly,
	         while the carry flag (CF) is unaffected.
DEC	      -- decrease ACC. (ACC <- ACC-1). The zero flag (ZF) is set accordingly,
	      	 while the carry flag (CF) is unaffected.
		 
####### COMPARISON #######
CMP       -- compare ACC to top of stack. Flags are set according to the comparison
	     `ACC - [SP]'. (ZF set iff ACC == [SP]; CF set iff ACC < [SP]).
	     Preserves ACC and [SP].
CMP imm64 -- compare ACC to value at stack index imm64. Flags are set according to
    	     the comparison `ACC - [SP + imm64]', similarly to `CMP'.

####### BRANCHING ########
JMP       -- indirect jump to address specified in ACC. (PC <- ACC)
	     Preserves ACC.
JMP imm64 -- direct jump to address. (PC <- imm64)
JEQ imm64 -- direct jump if equal, i.e. ZF is set. Should directly follow a CMP.
    	     Preserves ACC.
JNE imm64 -- direct jump if not equal, i.e. ZF is reset. Should directly follow a
             CMP. Preserves ACC.
JLT imm64 -- direct jump if less than, i.e. CF is set. Should directly follow a CMP.
    	     Preserves ACC.
JGT imm64 -- direct jump if greater than, i.e. ZF and CF are reset. Should directly
    	     follow a CMP. Preserves ACC.

######### CALLS ##########
CALL imm64 -- call procedure at address imm64. It pushes PC onto the stack and jumps
     	      to [imm64]. This instruction does not implement any calling convention;
	      that is up to the programmer.
	      (PC <- imm64, SP <- SP + 8, [SP] <- PC + ?)
RET        -- return from procedure. Pops address off stack and jumps to it.
	      (PC <- [SP], SP <- SP + 8)
SYSCALL3   -- perform three-argument system call. ACC contains the system call number;
	      the three arguments are contained on the stack, ordered such that the
	      first argument is at the top of the stack, followed by argument 2 and
	      then argument 3 (i.e. the address increases with argument number).
	      (arg1 = [SP], arg2 = [SP+8], arg3 = [SP+16])
LIBCALL3   -- perform three-argument library call. The three arguments are passed on
	      the stack, ordered such that the first argument is at the top of the
	      stack, followed by argument 2, etc. (arg1 = [SP], arg2 = [SP+8],
	      arg3 = [SP+16]). ACC is ignored when call is made. Return value is
	      stored in ACC.

######### OTHER ##########
INIT -- initialize program. Currently, this instruction only sets up the stack.
     	Call this instruction before anything else! It is allowed to clobber all
	registers.
HCF  -- ???

